'###############################################################################
'###############################################################################
'############################                ###################################
'############################   old stuff    ###################################
'############################                ###################################
'###############################################################################
'###############################################################################


Function test_draw_kill_tally()
	Local ts% = now()
	Local kills% = 25
	Repeat
		Cls()
		draw_kill_tally( ts, kills )
		Flip( 1 )
	Until KeyHit( KEY_ESCAPE ) Or AppTerminate()
End Function


Function debug_audio_drivers()
	DebugLog " AudioDrivers() -->"
	For Local drv$ = EachIn AudioDrivers()
		DebugLog "    " + drv
	Next
End Function


Function debug_array_append()
	Local a%[] = [ 0, 1, 2, 3 ]
	print_array( "a ", a )
	Local a1%[], a2%[]
	a1 = array_append( a, 25 )
	print_array( "a1", a1 )
	a2 = array_append( a1, 0 )
	print_array( "a2", a2 )
End Function


Function debug_insert_into_array()
	Local a%[], r%[]
	a = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
	print_array( "a    ", a )
	r = insert_into_array( 100, a, -1 )
	print_array( "i(-1)", r )
	r = insert_into_array( 100, a, 4 )
	print_array( "i(4) ", r )
	r = insert_into_array( 100, a, 9 )
	print_array( "i(9) ", r )
	
End Function


Function debug_remove_from_array()
	Local a%[], result%[]
	
	a = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
	print_array( "a   ", a )
	result = remove_from_array( a, 4 )
	print_array( "a-@4", result )
	result = remove_from_array( a, 0 )
	print_array( "a-@0", result )
	result = remove_from_array( a, 9 )
	print_array( "a-@9", result )
End Function

Function debug_set_range()
	Local a%[] = [ 0, 0, 0, 0, 0, 0, 0 ]
	print_array( "a", a )
	set_range( 10, 1, 3, a )
	print_array( "a", a )
End Function

Function debug_copy_into()
	Local big%[], small%[]
	
	big = [ 1, 2, 3, 4, 5 ]
	print_array( "big", big )
	small = [ 23, 24 ]
	print_array( "small", small )
	
	big = [ 1, 2, 3, 4, 5 ]
	copy_into( small, big, 0 )
	print_array( "big+small@0", big )

	big = [ 1, 2, 3, 4, 5 ]
	copy_into( small, big, 2 )
	print_array( "big+small@2", big )

	big = [ 1, 2, 3, 4, 5 ]
	copy_into( small, big, 3 )
	print_array( "big+small@3", big )
End Function

Function debug_graffiti_manager()
	Local e:ENVIRONMENT = ai_menu_game
	Local g:GRAFFITI_MANAGER = e.graffiti
	Local scale# = 1
	Local margin% = 0
	Local x% = 0
	Local y% = 0
	Local L:TList = CreateList()
	SetScale( scale, scale )
	Repeat
		Cls()
		If MouseDown( 1 )
			Local p:PARTICLE = get_particle( "tank_tread_trail_medium" )
			p.pos_x = MouseX()
			p.pos_y = MouseY()
			p.ang = Rand( 0, 365 )
			L.AddLast( p )
		End If
		If MouseHit( 2 )
			g.add_graffiti( L )
			L.Clear()
		End If
		
		g.draw()
		
		For Local p:PARTICLE = EachIn L
			p.draw()
		Next
		Flip( 1 )
	Until AppTerminate()
	End
End Function

'______________________________________________________________________________
Function debug_BOX_contains_partly()
	Local a:BOX = Create_BOX( 200, 200, 75, 75 )
	Local b:BOX = Create_BOX( MouseX(), MouseY(), 60, 60 )
	SetColor( 127, 127, 127 )
	Repeat
		Cls()
		b.x = MouseX()
		b.y = MouseY() 
		a.draw( a.intersects( b ))
		b.draw()
		Flip( 1 )
	Until KeyHit( KEY_ESCAPE )
End Function

'______________________________________________________________________________
Function show_me_the_shit()
	Local particle_emitters:PAIR[]= map_to_array( particle_emitter_map )
	Local projectile_launchers:PAIR[]= map_to_array( projectile_launcher_map )
	DebugStop
End Function

Function map_to_array:PAIR[]( map:TMap )
	Local list:TList = CreateList()
	Local size% = 0
	For Local key$ = EachIn map.Keys()
		list.AddLast( PAIR.Create( key, map.ValueForKey( key )))
		size :+ 1
	Next
	Local array:PAIR[] = New PAIR[ size ]
	Local i% = 0
	For Local p:PAIR = EachIn list
		array[i] = p
		i :+ 1
	Next
	Return array
End Function

Type PAIR
	Field key$
	Field value:Object

	Function Create:PAIR( key$, value:Object )
		Local p:PAIR= New pair
		p.key = key
		p.value = value
		Return p
	End Function
End Type

Function debug_ts( message$ )
	DebugLog "" + now() + " :: " + message
End Function

Function debug_generate_level_mini_preview()
	Local lev:LEVEL = load_level( "levels/training1.colosseum_level" )
	Local img:TImage = generate_level_mini_preview( lev )
	save_pixmap_to_file( img.Lock( 0, True, False ), "training1_minipreview" )
End Function

Function debug_get_map_keys()
	DebugLog " fonts: [ ~n  " + ",~n  ".Join( get_keys( font_map )) + " ]"
	DebugLog " sounds: [ ~n  " + ",~n  ".Join( get_keys( sound_map )) + " ]"
	DebugLog " images: [ ~n  " + ",~n  ".Join( get_keys( image_map )) + " ]"
	DebugLog " props: [ ~n  " + ",~n  ".Join( get_keys( prop_map )) + " ]"
	DebugLog " ai_types: [ ~n  " + ",~n  ".Join( get_keys( ai_type_map )) + " ]"
End Function

Function debug_agent_lists( to_console% = False )
	SetOrigin( 0, 0 )
	sx = 2; sy = 2
	For Local list:TList = EachIn main_game.agent_lists
		For Local ag:COMPLEX_AGENT = EachIn list
			If Not to_console
				debug_drawtext( ag.name + ":" + ag.id )
			Else
				DebugLog( ag.name + ":" + ag.id )
			End If
		Next
		If list <> main_game.agent_lists.Last()
			sy :+ 5
			SetColor( 127, 127, 127 )
			DrawLine( sx, sy, sx + 80, sy )
			sy :+ 5
		End If
	Next
End Function

Function debug_kill_tally()
	Local str$ = "total kills"
	Local bg:TImage = screencap()
	
	kill_tally( str, bg, 0 )
	kill_tally( str, bg, 1 )
	kill_tally( str, bg, 2 )
	kill_tally( str, bg, 3 )
	kill_tally( str, bg, 5 )
	kill_tally( str, bg, 10 )
	kill_tally( str, bg, 11 )
	kill_tally( str, bg, 50 )
	kill_tally( str, bg, 99 )
	kill_tally( str, bg, 100 )
End Function

Function debug_print_profile_inventory()
	Local str$ = " profile.inventory_________________~n"
	For Local item:INVENTORY_DATA = EachIn profile.inventory
		str :+ "   "+item.to_string()+"~n"
	Next
	DebugLog str
	
End Function

Function debug_doors()
	Local spawn:POINT = Create_POINT( window_w/2, window_h/2 )
	Local env:ENVIRONMENT = Create_ENVIRONMENT()
	env.add_door( spawn, POLITICAL_ALIGNMENT.FRIENDLY )
	
	Local before% = now()
	Repeat
		Cls()
		
		If KeyHit( KEY_ENTER )
			env.toggle_doors( POLITICAL_ALIGNMENT.FRIENDLY )
		End If
		If MouseDown( 1 )
			spawn.move_to( Create_cVEC( MouseX(), MouseY() ))
		End If
		
		If now() - before > time_per_frame_min
			before = now()
			For Local d:DOOR = EachIn env.friendly_door_list
				d.update()
			Next
		End If
		
		For Local d:DOOR = EachIn env.friendly_door_list
			d.draw_bg()
			d.draw_fg()
		Next
		
		Flip( 1 )
	Until KeyHit( KEY_ESCAPE ) Or AppTerminate()
	End
End Function
'______________________________________________________________________________
Function debug_dirtyrects()
	Local o:cVEC = Create_cVEC( 0, 0 )
	Local window_rect:BOX = Create_BOX( o.x, o.y, window_w, window_h )
	Local mouse:cVEC

	Local list:TList = CreateList()
	Local bg_img:TImage = generate_sand_image( window_w, window_h )
	Local retain_particles% = False
	Local visible_particles%, hidden_particles%
	SetImageFont( get_font( "consolas_12" ))
	
	Local before% = now()
	Repeat
		Cls()
		
		sx = 1 - o.x
		sy = 1 - o.y
		
		mouse = Create_cVEC( MouseX(), MouseY() )
		
		If now() - before > time_per_frame_min
			before = now()
			
			If KeyDown( KEY_RIGHT ) Then o.x :+ 2
			If KeyDown( KEY_LEFT  ) Then o.x :- 2
			If KeyDown( KEY_DOWN  ) Then o.y :+ 2
			If KeyDown( KEY_UP    ) Then o.y :- 2
			
			SetOrigin( o.x, o.y )
			window_rect = Create_BOX( -o.x, -o.y, window_w, window_h )
			
			If MouseDown( 1 )
				Local p:PARTICLE = get_particle( "tank_tread_trail_medium" )
				p.move_to( Create_cVEC( mouse.x - o.x, mouse.y - o.y ))
				p.ang = Rnd( -180, 180 )
				p.manage( list )
			End If
			
			If KeyHit( KEY_ENTER )
				retain_particles = True
			End If
			
		End If
		
		SetAlpha( 1 )
		SetColor( 255, 255, 255 )
		SetRotation( 0 )
		SetScale( 1, 1 )
		DrawImage( bg_img, 0, 0 )
		
		visible_particles = 0
		hidden_particles = 0
		For Local p:PARTICLE = EachIn list
			p.draw()
			
			Local dirty_rect:BOX = p.get_bounding_box()
			If window_rect.contains( dirty_rect )
				visible_particles :+ 1
			Else
				hidden_particles :+ 1
			End If
		Next
		
		If retain_particles
			retain_particles = False
			For Local p:PARTICLE = EachIn list
				Local dirty_rect:BOX = p.get_bounding_box()
				If window_rect.contains( dirty_rect )
					'copy+paste pixmap into bg_img
					Local dirty_rect_pixmap:TPixmap = GrabPixmap( dirty_rect.x + o.x, dirty_rect.y + o.y, dirty_rect.w, dirty_rect.h )
					Local bg_img_pixmap:TPixmap = LockImage( bg_img )
					bg_img_pixmap.Paste( dirty_rect_pixmap, dirty_rect.x, dirty_rect.y )
					UnlockImage( bg_img )
					p.unmanage()
				End If
			Next
		End If
		
		If KeyDown( KEY_RSHIFT )
			SetAlpha( 1 )
			SetColor( 255, 255, 255 )
			SetRotation( 0 )
			SetScale( 1, 1 )
			debug_drawtext( "visible particles "+visible_particles )
			debug_drawtext( "hidden particles  "+hidden_particles )
			
			For Local p:PARTICLE = EachIn list
				Local dirty_rect:BOX = p.get_bounding_box()
				SetAlpha( 0.33333 )
				DrawRectLines( dirty_rect.x, dirty_rect.y, dirty_rect.w, dirty_rect.h )
			Next
		End If
		
		Flip( 1 )
	Until KeyHit( KEY_ESCAPE ) Or AppTerminate()
	End
End Function
'______________________________________________________________________________
Function debug_widget()
	Local list:TList = CreateList()
	Local before% = now()
	Local mouse:POINT = New POINT
	
	Local game:ENVIRONMENT = create_environment()
	Local carrier:COMPLEX_AGENT = game.spawn_agent( ENEMY_INDEX_CARRIER, POLITICAL_ALIGNMENT.HOSTILE, Create_POINT( window_w/2, window_h/3 )).avatar
	
	Local p:POINT = Create_POINT( window_w/2, 2*window_h/3 )
	Local w:WIDGET
	
	w = WIDGET( WIDGET.Create( "blinker", create_rect_img( 25, 25, 12.5, 12.5 ),,,, False ))
	w.add_state( TRANSFORM_STATE( TRANSFORM_STATE.Create( ,,,,,, 0.5,,, 1000 )))
	w.add_state( TRANSFORM_STATE( TRANSFORM_STATE.Create( ,,,,,, 1.0,,, 1000 )))
	w = w.clone()
	w.parent = p
	w.manage( list )

	w = WIDGET( WIDGET.Create( "pump", create_rect_img( 15, 15, 7.5, 7.5 ),,,, False ))
	w.add_state( TRANSFORM_STATE( TRANSFORM_STATE.Create(   0.0 ,,,,,,,,, 1000 )))
	w.add_state( TRANSFORM_STATE( TRANSFORM_STATE.Create( -35.0 ,,,,,,,,, 1000 )))
	w = w.clone()
	w.parent = p
	w.attach_at( -35,,, true )
	w.manage( list )
	
  w = WIDGET( WIDGET.Create( "hinged_door", create_rect_img( 50, 10, 5, 5 ),,,, False ))
	w.add_state( TRANSFORM_STATE( TRANSFORM_STATE.Create( -25.0 ,,  0.0,,,,,,, 1000 )))
	w.add_state( TRANSFORM_STATE( TRANSFORM_STATE.Create( -25.0 ,, 90.0,,,,,,, 1000 )))
	w = w.clone()
	w.parent = p
	w.attach_at( -10, -10,, true )
	w.manage( list )
	
	Repeat
		Cls()
		
		sx = 1; sy = 1
		mouse.pos_x = MouseX(); mouse.pos_y = MouseY()
		
		If MouseDown( 1 )
			'p.move_to( mouse )
		End If
		If KeyDown( KEY_LEFT )
			'p.ang :+ 1
		Else If KeyDown( KEY_RIGHT )
			'p.ang :- 1
		End If
		If MouseHit( 2 )
			For Local w:WIDGET = EachIn list
				w.queue_transformation( 1 )
			Next
			carrier.deploy()
		End If
		
		If (now() - before) > time_per_frame_min
			before = now()
			
			For Local w:WIDGET = EachIn list
				w.update()
			Next
			carrier.update()
		End If
		
		Local i% = 0
		For Local w:WIDGET = EachIn list
			debug_drawline( create_cvec( w.get_x(), w.get_y() ), w.parent )
			w.draw()
			
			SetColor( 255, 255, 255 )
			SetAlpha( 1 )
			SetRotation( 0 )
			SetScale( 1, 1 )
			debug_drawtext( "w["+i+"].state_index_cur "+w.state_index_cur )
			
			i :+ 1
		Next
		
		carrier.draw()
		
		For Local list:TList = EachIn carrier.all_widget_lists
			For Local w:WIDGET = EachIn list
				debug_drawtext( "w.offset_ang="+w.offset_ang+" w.ang_offset="+w.ang_offset )
			Next
		Next
		
		Flip( 1 )
	Until KeyHit( KEY_ESCAPE ) Or AppTerminate()
	End
End Function
'______________________________________________________________________________
Function debug_spawner()
	Local mouseP:POINT = New POINT
	Local environmental_emitter_list:TList = CreateList()
	Local agent_list:TList = CreateList()
	Local particle_list_bg:TList = CreateList()
	Local particle_list_fg:TList = CreateList()

	Repeat
		Cls()
		
		mouseP.pos_x = MouseX(); mouseP.pos_y = MouseY()
		
		If MouseHit( 1 )
			Local ag:COMPLEX_AGENT = COMPLEX_AGENT( COMPLEX_AGENT.Copy( complex_agent_archetype[PLAYER_INDEX_LIGHT_TANK] ))
			ag.manage( agent_list )
			ag.spawn_at( mouseP, 1250 )
			Local em:EMITTER = EMITTER( EMITTER.Copy( particle_emitter_archetype[PARTICLE_EMITTER_INDEX_SPAWNER] ))
			em.manage( environmental_emitter_list )
			em.parent = ag
			em.attach_at( ,, 30,60, -180,180,,,,, -0.015,-0.025 )
			em.enable( MODE_ENABLED_WITH_TIMER )
			em.time_to_live = 1000
			Local p:PARTICLE = get_particle( "soft_glow" )
			p.red = 0.3; p.green = 0.3; p.blue = 0.9
			p.manage( particle_list_fg )
			p.move_to( ag )
		End If
		
		For Local em:EMITTER = EachIn environmental_emitter_list
			em.update()
			em.emit( particle_list_bg )
		Next
		
		For Local p:PARTICLE = EachIn particle_list_bg
			p.update()
			p.draw()
			p.prune()
		Next
		For Local ag:COMPLEX_AGENT = EachIn agent_list
			ag.update()
			ag.draw()
		Next
		For Local p:PARTICLE = EachIn particle_list_fg
			p.update()
			p.draw()
			p.prune()
		Next
		
		Flip( 1 )
	Until KeyHit( KEY_ESCAPE ) Or AppTerminate()
	End
End Function
'Global maus_x#, maus_y#, speed# = 1, r#, a#, px#, py#
Global wait_ts%, wait_time%, r%, c%, mouse:CELL
Const PATH_UNSET% = 1000
Global path_type% = PATH_UNSET, mouse_path_type%
'______________________________________________________________________________
Function debug_format_number()
	Local i% = 1, n% = 0
	While n <= 100000000
		DebugLog "  case "+i+" -> format_number( "+n+" ) = "+format_number( n )
		i :+ 1
		If n = 0 Then n :+ 1 Else n :* 10
	End While
	End
End Function
'______________________________________________________________________________
Function debug_coordinate_overlay()
	Local move_speed% = 1
	If KeyDown( KEY_LSHIFT ) Or KeyDown( KEY_RSHIFT ) Then move_speed = 5
	If      KeyDown( KEY_LEFT )  Then debug_origin.x :+ move_speed ..
	Else If KeyDown( KEY_RIGHT ) Then debug_origin.x :- move_speed
	If      KeyDown( KEY_UP )    Then debug_origin.y :+ move_speed ..
	Else If KeyDown( KEY_DOWN )  Then debug_origin.y :- move_speed
	
	SetScale( 1, 1 )
	SetRotation( 0 )
	
	'real origin -> game origin
	SetOrigin( 0, 0 )
	SetColor( 255, 255, 255 )
	SetAlpha( 0.5 )
	debug_drawline( real_origin, game.drawing_origin,, "("+Int(game.drawing_origin.x)+","+Int(game.drawing_origin.y)+")" )
	''real origin -> player
	'debug_drawline( real_origin, game.player )
	''game origin -> player
	'debug_drawline( game.drawing_origin, game.player )
	
	'crosshairs (show real screen center)
	SetColor( 127, 127, 127 )
	SetAlpha( 0.25 )
	debug_drawline( cVEC.Create( window_w_half, 0 ), cVEC.Create( window_w_half, window_h ),,, "("+Int(debug_origin.x)+","+Int(debug_origin.y)+")")
	debug_drawline( cVEC.Create( 0, window_h_half ), cVEC.Create( window_w, window_h_half ))
	
	'player -> mouse
	SetOrigin( game.drawing_origin.x, game.drawing_origin.y )
	SetColor( 127, 255, 255 )
	SetAlpha( 0.5 )
	debug_drawline( game.player, game_mouse, "P", "M", "CENTER ME!" )

End Function
'______________________________________________________________________________
Function debug_load_data()
	DebugLog( " debug load_data" )
	For Local file_path$ = EachIn file_paths
		DebugLog( " file_path -> "+file_path )
	Next
	For Local key$ = EachIn font_map.Keys()
		Local font:TImageFont = get_font( key )
		DebugLog( " font_map -> "+key+" -> { CountGlyphs():"+font.CountGlyphs()+", Height():"+font.Height()+" }" )
	Next
	For Local key$ = EachIn sound_map.Keys()
		Local sound:TSound = get_sound( key )
		Local db_str$ = "null"
		If sound <> Null Then db_str = "loaded"
		DebugLog( " sound_map -> "+key+" -> "+db_str )
	Next
	For Local key$ = EachIn image_map.Keys()
		Local image:TImage = get_image( key )
		DebugLog( " image_map -> "+key+" -> { size("+image.width+","+image.height+"), handle("+Int(image.handle_x)+","+Int(image.handle_y)+"), frames:"+image.frames.Length )
	Next
End Function
'______________________________________________________________________________
Function debug_draw_walls()
	Local lev:LEVEL = Create_LEVEL( 100, 100 )
	lev.add_divider( 33, LINE_TYPE_HORIZONTAL )
	lev.add_divider( 66, LINE_TYPE_HORIZONTAL )
	lev.add_divider( 82, LINE_TYPE_HORIZONTAL )
	lev.add_divider( 25, LINE_TYPE_VERTICAL )
	lev.add_divider( 75, LINE_TYPE_VERTICAL )
	lev.add_divider( 82, LINE_TYPE_VERTICAL )
	lev.set_path_region( CELL.Create( 1, 1 ), PATH_BLOCKED )
	lev.set_path_region( CELL.Create( 1, 2 ), PATH_BLOCKED )
	lev.set_path_region( CELL.Create( 0, 1 ), PATH_BLOCKED )
	lev.set_path_region( CELL.Create( 2, 1 ), PATH_BLOCKED )
	lev.set_path_region( CELL.Create( 2, 2 ), PATH_BLOCKED )

	Local img:TImage = generate_level_walls_image( lev )
	Local scale# = 5.00
	SetScale( scale,scale )
	SetLineWidth( 1.00 )
	Local origin:cVEC = cVEC.Create( 0, 0 )
	Repeat
		Cls

		SetAlpha( 1.0 )
		DrawImage( img, 0,0 )

		SetAlpha( 0.333 )
		For Local i% = 0 To lev.horizontal_divs.length - 1
			DrawLine( origin.x,origin.y+scale*lev.horizontal_divs[i], origin.x+lev.width,origin.y+scale*lev.horizontal_divs[i] )
		Next
		For Local i% = 0 To lev.vertical_divs.length - 1
			DrawLine( origin.x+scale*lev.vertical_divs[i],origin.y, origin.x+scale*lev.vertical_divs[i],origin.y+lev.height )
		Next
		
		Flip
	Until KeyHit( KEY_ESCAPE )
	End
End Function

'______________________________________________________________________________
Function test_ang_wrap()
	For Local i# = -750.0 To 750.0 Step 10
		If Abs( ang_wrap( i )) > 180 Then debuglog( "ang_wrap() test failed" )
	Next
End Function
'______________________________________________________________________________
Function debug_atan2()
	For Local i% = 0 To 360
		DebugLog "  ATan2( Sin("+i+"), Cos("+i+") ) -> "+ATan2( Sin(i), Cos(i) )
	Next
End Function
'______________________________________________________________________________
Function debug_complex_agent_emitters()
	sx = arena_offset + 3; sy = arena_offset + 3; h = 10
	If player <> Null And Not FLAG_in_menu
		debug_drawtext( player.drive_forward_emitters.Count() )
		debug_drawtext( player.drive_backward_emitters.Count() )
		debug_drawtext( player.death_emitters.Count() )
	End If
End Function
'______________________________________________________________________________
Function debug_main()
	Repeat
		For Local w:WIDGET = EachIn w
			w.update()
		Next
		Cls
		draw_widget_debug()
		For Local w:WIDGET = EachIn w
			w.draw()
		Next
		Flip( 1 )
	Until AppTerminate() Or KeyHit( KEY_ESCAPE )
End Function
'______________________________________________________________________________
Function debug_range()
	Local r:RANGE_Int = New RANGE_Int
	Local str$ = ""
	
	Print "( " + r.low + ", " + r.high + " )"
	str = ""
	For Local i% = 0 To 10
		str :+ r.get() + " "
	Next
	Print str
	
	r.set( 1, 5 )
	
	Print "( " + r.low + ", " + r.high + " )"
	str = ""
	For Local i% = 0 To 10
		str :+ r.get() + " "
	Next
	Print str
	
End Function
'______________________________________________________________________________
Function debug_heap( message$ = "" )
	SetColor( 255, 255, 255 )
	SetRotation( 0 )
	SetScale( 1, 1 )
	SetAlpha( 1 )
	
	Local pq:PATH_QUEUE = pathing.potential_paths
	Local tree:CELL[] = pathing.potential_paths.binary_tree

	Local wait_ts% = now()
	Local wait_time%
	If KeyDown( KEY_F3 ) Then wait_time = 0 Else wait_time = 500
	wait_time = 500

	While ((now() - wait_ts) <= wait_time) And Not KeyHit( KEY_F3 )
		
		If KeyHit( KEY_ESCAPE ) Then End
		If KeyDown( KEY_F4 ) Then wait_ts = now()
		
		Cls
		
		sx = 3; sy = 3
		
		'draw optional message
		SetColor( 127, 127, 255 ); SetAlpha( 1 )
		SetImageFont( get_font( "consolas_12" ))
		DrawText( message, sx, sy ); sy :+ 11

		SetImageFont( get_font( "consolas_10" ))
		If tree[0] = Null Then SetColor( 64, 64, 64 ) ..
		Else                   SetColor( 255, 255, 255 )
		DrawText( heap_info( 0 ), sx, sy )
		draw_heap( 0 )
		
		Flip
		
	End While
End Function

Function draw_heap( i% )
	Local pq:PATH_QUEUE = pathing.potential_paths
	Local tree:CELL[] = pathing.potential_paths.binary_tree
	If i < pq.item_count
		
		If pq.left_child_i( i ) < pq.item_count
			sx :+ 4; sy :+ 9
			If tree[pq.left_child_i( i )] = Null Then                        SetColor( 64, 64, 64 ) ..
			Else If pq.get_cost(i) > pq.get_cost( pq.left_child_i( i )) Then SetColor( 255, 127, 127 ) ..
			Else                                                             SetColor( 255, 255, 255 )
			DrawText( heap_info( pq.left_child_i( i )), sx, sy )
			draw_heap( pq.left_child_i( i ))
			
			If pq.right_child_i( i ) < pq.item_count
				sy :+ 9
				If tree[pq.right_child_i( i )] = Null Then                        SetColor( 64, 64, 64 ) ..
				Else If pq.get_cost(i) > pq.get_cost( pq.right_child_i( i )) Then SetColor( 255, 127, 127 ) ..
				Else                                                              SetColor( 255, 255, 255 )
				DrawText( heap_info( pq.right_child_i( i )), sx, sy )
				draw_heap( pq.right_child_i( i ))
			End If
			
			sx :- 4
		End If
		
	End If
End Function

Function heap_info$( i% )
	Local info$ = ""+i+" "
	If pathing.potential_paths.binary_tree[i] <> Null
		'info :+ Int( pathing.f( pathing.potential_paths.binary_tree[i] ))
		info :+ Int( pathing.potential_paths.get_cost( i ))
	Else 'tree[i] == Null
		info :+ "null"
	End If
	If i = 0
		info :+ " {ROOT}"
'	Else If pathing.potential_paths.left_child_i( i ) > pathing.potential_paths.item_count - 1
'		info :+ " {leaf}"
'	Else If i = pathing.potential_paths.item_count - 1
'		info :+ " {LAST}"
	End If
	Return info
End Function

Function debug_heap_indent%( i% )
	Local indent% = 0
	While i > 0
		indent :+ 4
		i = pathing.potential_paths.parent_i( i )
	End While
	Return indent
End Function
'______________________________________________________________________________
'F4 to path from player to mouse; hold F4 to pause; hold F3 to fast-forward
Function debug_pathing( message$ = "", done% = False )
	SetColor( 255, 255, 255 )
	SetRotation( 0 )
	SetScale( 1, 1 )
	SetAlpha( 1 )
	
	Local wait_ts% = now()
	Local wait_time%
	If KeyDown( KEY_F3 ) Then wait_time = 0 Else wait_time = 500

	While (((now() - wait_ts) <= wait_time) And (Not done)) ..
	Or (done And Not KeyHit( KEY_F2 ))
		
		If KeyHit( KEY_ESCAPE ) Then End
		If KeyDown( KEY_F4 ) Then wait_ts = now()
		
		Local mouse:CELL = containing_cell( MouseX() - arena_offset, MouseY() - arena_offset )
		If KeyDown( KEY_F5 )
			pathing.set_grid( mouse, PATH_BLOCKED )
		Else If KeyDown( KEY_F6 )
			pathing.set_grid( mouse, PATH_PASSABLE )
		End If
		
		Cls
		
		'draw debug help
		SetColor( 255, 255, 255 ); SetAlpha( 1 )
		SetImageFont( get_font( "consolas_12" ))
		DrawText( "set_goal,find_path:F4  pause:F4/faster:F3  block:F5  clear:F6", 3, 3 )
		'draw pathing_grid cell border lines
		SetLineWidth( 1 ); SetColor( 32, 32, 32 ); SetAlpha( 1.00 )
		For Local r% = 2 To pathing_grid_h - 2
			DrawLine( arena_offset, r*cell_size, pathing_grid_w*cell_size - arena_offset, r*cell_size )
		Next
		For Local c% = 2 To pathing_grid_w - 2
			DrawLine( c*cell_size, arena_offset, c*cell_size, pathing_grid_h*cell_size - arena_offset )
		Next
		Local cursor:CELL = New CELL
		For cursor.row = 2 To pathing_grid_h - 3
			For cursor.col = 2 To pathing_grid_w - 3
				'draw pathing_grid contents
				SetColor( 255, 255, 255 ); SetAlpha( 0.85 )
				If pathing.grid( cursor ) = PATH_BLOCKED Then ..
					DrawRect( cursor.col*cell_size + 1, cursor.row*cell_size + 1, cell_size - 2, cell_size - 2 )
			Next
		Next
		For cursor = EachIn pathing.pathing_visited_list
			'draw pathing_came_from
			SetLineWidth( 1 ); SetColor( 255, 255, 255 ); SetAlpha( 0.5 )
			If pathing.came_from( cursor ) <> Null Then ..
				DrawLine( cursor.col*cell_size + cell_size/2, cursor.row*cell_size + cell_size/2, pathing.came_from( cursor ).col*cell_size + cell_size/2, pathing.came_from( cursor ).row*cell_size + cell_size/2 )
			'draw pathing_visited
			SetColor( 255, 212, 212 ); SetAlpha( 0.5 )
			DrawRect( cursor.col*cell_size + 1, cursor.row*cell_size + 1, cell_size - 2, cell_size - 2 )
		Next
		''potential paths header
		'SetAlpha( 1 ); SetImageFont( get_font( "consolas_10" ))
		'SetColor( 127, 127, 127 )
		'DrawText( "potential paths", arena_w + 4, 4 )
		'sx = arena_offset + arena_w + 4
		'sy = arena_offset
		'SetImageFont( get_font( "consolas_10" ))
		'If pathing.potential_paths.binary_tree[0] = Null Then SetColor( 64, 64, 64 ) Else SetColor( 255, 255, 255 )
		'DrawText( heap_info( 0 ), sx, sy )
		'draw_heap( 0 )
		
		'start and goal
		If global_start <> Null
			SetColor( 64, 255, 64 ); SetAlpha( 1 )
			DrawRect( global_start.col*cell_size + 1, global_start.row*cell_size + 1, cell_size - 2, cell_size - 2 )
		End If
		If global_goal <> Null
			SetColor( 64, 64, 255 ); SetAlpha( 1 )
			DrawRect( global_goal.col*cell_size + 1, global_goal.row*cell_size + 1, cell_size - 2, cell_size - 2 )
		End If
		'draw optional message
		SetColor( 255, 255, 255 ); SetAlpha( 1 )
		SetImageFont( get_font( "consolas_12" ))
		DrawText( message, 3, 15 )
		
		Flip
		
	End While
End Function
'______________________________________________________________________________
Function console_debug()
	For Local i% = 0 To 360 Step 5
		Print "round_to_nearest( " + i + ", 90 ) = " + round_to_nearest( i, 90 )
	Next
End Function
'______________________________________________________________________________
Function visual_debug()
	SetColor( 255, 255, 255 )
	SetRotation( 0 )
	SetScale( 1, 1 )
	SetAlpha( 1 )
	
	sx = 4; sy = 4
	h = 10
	
	SetImageFont( consolas_normal_12 )
	debug_drawtext( "player.stickies " + player.stickies.Count() )
	
	Local length# = 30
	SetLineWidth( 2 )
	SetColor( 64, 127, 64 )
	For Local p:PROJECTILE = EachIn projectile_list
		For Local f:FORCE = EachIn p.force_list
			DrawLine( p.pos_x, p.pos_y, p.pos_x + length*f.magnitude_cur*Cos( p.ang + f.direction ), p.pos_y + length*f.magnitude_cur*Sin( p.ang + f.direction ) )
		Next
	Next

	debug_drawtext( "friendly agents " + friendly_agent_list.Count() )
	debug_drawtext( "hostile agents " + hostile_agent_list.Count() )


	SetColor( 127, 64, 64 ); DrawLine( c.x, c.y, c.x + c.vel_x*length, c.y + c.vel_y*length )
	SetColor( 64, 127, 64 ); DrawLine( c.x, c.y, c.x + c.acc_x*length, c.y + c.acc_y*length )
	SetColor( 64, 64, 127 ); DrawLine( c.x, c.y, c.x + Cos(c.ang)*length, c.y + Sin(c.ang)*length )
	SetColor( 255, 127, 127 ); DrawLine( c.x, c.y, c.x + length*c.driving_force.control_pct*Cos(c.driving_force.direction + c.ang), c.y + length*c.driving_force.control_pct*Sin(c.driving_force.direction + c.ang) )
	SetColor( 127, 255, 127 ); DrawLine( c.x, c.y, c.x + length*c.turning_force.control_pct*Cos(c.ang + 90),                        c.y + length*c.turning_force.control_pct*Sin(c.ang + 90) )
	px :+ speed * KeyDown( KEY_RIGHT ) - speed * KeyDown( KEY_LEFT )
	py :+ speed * KeyDown( KEY_DOWN ) - speed * KeyDown( KEY_UP )
	maus_x = MouseX() - arena_offset
	maus_y = MouseY() - arena_offset
	
	a = vector_diff_angle( px, py, maus_x, maus_y )
	r = vector_diff_length( px, py, maus_x, maus_y )
	
	SetLineWidth( 1 )
	SetColor( 127, 255, 127 ); DrawLine( px, py, px + r*Cos(a), py + r*Sin(a) )

	SetColor( 255, 127, 127 ); DrawLine( px, py, px + 30*Cos(avatar.turrets[0].ang), avatar.y + 30*Sin(avatar.turrets[0].ang) )
	SetColor( 255, 127, 127 ); DrawLine( avatar.x, avatar.y, avatar.x + 30*Cos(avatar.turrets[0].ang), avatar.y + 30*Sin(avatar.turrets[0].ang) )
	SetColor( 127, 255, 127 ); DrawLine( avatar.x, avatar.y, avatar.x + dist_to_target*Cos(dist_to_target), avatar.y + dist_to_target*Sin(dist_to_target) )

	SetColor( 255, 255, 255 )

	
	Local p:COMPLEX_AGENT = player, t:TURRET = p.turrets[0]
	DrawText( "tur.proj_em.offset " + em.offset, sx, sy ); sy :+ h
	DrawText( "tur.proj_em.offset_ang " + em.offset_ang, sx, sy ); sy :+ h
	DrawText( "ammo (main) " + t.cur_ammo + "/" + t.max_ammo, sx, sy); sy :+ h
	sy :+ h
	SetColor( 220, 30, 30 ); SetImageFont( consolas_normal_12 )
	DrawText( "particles " + (particle_list_background.Count() + particle_list_foreground.Count()), sx, sy ); sy :+ h
	DrawText( "retained_particles " + retained_particle_list.Count(), sx, sy ); sy :+ h
	DrawText( "emitters " + emitter_list.Count(), sx, sy ); sy :+ h
	DrawText( "projectiles " + (friendly_projectile_list.Count() + hostile_projectile_list.Count()), sx, sy ); sy :+ h
	DrawText( "enemies " + enemy_list.Count(), sx, sy ); sy :+ h
	DrawText( "pickups " + pickup_list.Count(), sx, sy ); sy :+ h
	sy :+ h
	
	SetColor( 255, 20, 20 )
	SetLineWidth(2)
	Local x#[3], y#[3], i%
	
	x[0] = em.parent.x
	x[1] = em.parent.x + em.offset * Cos( em.parent.ang + em.offset_ang )
	x[2] = em.parent.x + em.offset * Cos( em.parent.ang + em.offset_ang )
	
	y[0] = em.parent.y
	y[1] = em.parent.y + em.offset * Sin( em.parent.ang + em.offset_ang )
	y[2] = em.parent.y + em.offset * Sin( em.parent.ang + em.offset_ang )
	
	For i = 0 To x.Length - 2
		DrawLine( x[i], y[i], x[i+1], y[i+1] )
	Next



	DrawText( "projectiles " + projectile_list.Count(), offset, offset + 10*line ); line :+ 1
	DrawText( "particles " + particle_list.Count(), offset, offset + 10*line ); line :+ 1
	DrawText( DEBUG_COUNTER, offset, offset + 10*line ); line :+ 1
	DrawText( test_timer.Ticks(), offset, offset + 10*line ); line :+ 1
	If Not particle_list.IsEmpty()
		Local p:PARTICLE = PARTICLE(particle_list.Last())
		DrawText( "--- latest particle ---", offset, offset + 10*line ); line :+ 1
		Local L% = p.life_time
		DrawText( "life_time       L = " + L, offset, offset + 10*line ); line :+ 1
		Local C% = now()
		DrawText( "clock           C = " + C, offset, offset + 10*line ); line :+ 1
		Local T% = p.created_ts
		DrawText( "created_ts      T = " + T, offset, offset + 10*line ); line :+ 1
		
		DrawText( "              C-T = " + (C-T), offset, offset + 10*line ); line :+ 1
		DrawText( "          C-T > L = " + ((C-T) > L), offset, offset + 10*line ); line :+ 1
	End If
	DrawText( display_name + ".x       " + x, x, line*10 + y ); line :+ 1
	DrawText( display_name + ".y       " + y, x, line*10 + y ); line :+ 1
	DrawText( display_name + ".vel_x       " + vel_x, x, line*10 + y ); line :+ 1
	DrawText( display_name + ".vel_y       " + vel_y, x, line*10 + y ); line :+ 1
	DrawText( display_name + ".ang         " + ang, x, line*10 + y ); line :+ 1
	DrawText( display_name + ".ang_vel     " + ang_vel, x, line*10 + y ); line :+ 1
	DrawText( display_name + ".tur_ang     " + tur_ang, x, line*10 + y ); line :+ 1
	DrawText( display_name + ".tur_ang_vel " + tur_ang_vel, x, line*10 + y ); line :+ 1
	SetLineWidth(2)
	For Local i% = 0 To 3
		If player.tread_debris_emitter[i].alive()
			DrawText( "emitter " + i + " active", offset, i * 10 + offset )
			DrawLine( player.x, player.y, player.x + player.tread_debris_emitter[i].offset * Cos( player.tread_debris_emitter[i].offset_ang + player.ang ), player.y + player.tread_debris_emitter[i].offset * Sin( player.tread_debris_emitter[i].offset_ang + player.ang ))
		End If
	Next
	
	SetLineWidth(2)
	Local x#[3], y#[3], i%
	
	x[0] = p.x
	x[1] = p.x + t.offset * Cos( t.offset_ang + p.ang )
	x[2] = p.x + t.offset * Cos( t.offset_ang + p.ang ) + t.muz_offset * Cos( t.muz_offset_ang + p.ang + t.ang )
	
	y[0] = p.y
	y[1] = p.y + t.offset * Sin( t.offset_ang + p.ang )
	y[2] = p.y + t.offset * Sin( t.offset_ang + p.ang ) + t.muz_offset * Sin( t.muz_offset_ang + p.ang + t.ang )
	
	For i = 0 To x.Length - 2
		DrawLine( x[i], y[i], x[i+1], y[i+1] )
	Next
	For i = 0 To x.Length - 1
		DrawText( "x" + i + " = " + x[i], offset, offset + 10*line ); line :+ 1
		DrawText( "y" + i + " = " + y[i], offset, offset + 10*line ); line :+ 1
	Next
	
	Print "0 Mod 360 = " + 0 Mod 360 + "; should be 0"
	Print "90 Mod 360 = " + 90 Mod 360 + "; should be 90"
	Print "180 Mod 360 = " + 180 Mod 360 + "; should be 180"
	Print "270 Mod 360 = " + 270 Mod 360 + "; should be 270"
	Print "359 Mod 360 = " + 359 Mod 360 + "; should be 359"
	Print "360 Mod 360 = " + 360 Mod 360 + "; should be 0"
	Print "540 Mod 360 = " + 540 Mod 360 + "; should be 180"
	Print "720 Mod 360 = " + 720 Mod 360 + "; should be 0"
	Print "-90 Mod 360 = " + (-90) Mod 360 + "; should be 270"
	Print "-180 Mod 360 = " + (-180) Mod 360 + "; should be 180"
	Print "-270 Mod 360 = " + (-270) Mod 360 + "; should be 90"
	Print "-359 Mod 360 = " + (-359) Mod 360 + "; should be 1"
	Print "-360 Mod 360 = " + (-360) Mod 360 + "; should be 0"
	Print "-540 Mod 360 = " + (-540) Mod 360 + "; should be 180"
	Print "-720 Mod 360 = " + (-720) Mod 360 + "; should be 0"

End Function
